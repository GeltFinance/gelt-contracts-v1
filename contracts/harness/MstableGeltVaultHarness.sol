// SPDX-License-Identifier: AGPL-3.0-or-later
pragma solidity 0.8.9;

import "../MstableGeltVault.sol";

contract MstableGeltVaultHarness is MstableGeltVault {
    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;

    bool public useMockStrategy;
    uint256 public strategyValue;

    constructor(
        IERC20MetadataUpgradeable bAsset,
        IMasset mAsset,
        IInterestBearingMasset imAsset,
        IVaultedInterestBearingMasset vimAsset,
        ISaveWrapper saveWrapper,
        string memory name,
        string memory symbol,
        bool useMockStrategy_
    ) {
        MstableGeltVault.initialize(bAsset, mAsset, imAsset, vimAsset, saveWrapper, name, symbol);
        useMockStrategy = useMockStrategy_;
        strategyValue = 0;
    }

    function harnessCalcMintTokens(uint256 mintAmount) public view returns (uint256) {
        return _calcMintTokens(mintAmount);
    }

    function harnessCalcRedeemAmount(uint256 redeemTokens) public view returns (uint256) {
        return _calcRedeemAmount(redeemTokens);
    }

    function harnessGetStrategyValue() public view returns (uint256) {
        return _getStrategyValue();
    }

    /// @dev Sets the total value held by the strategy in underlying.
    function harnessExecuteStrategyNetDeposit(uint256 initialAmount, uint256 strategyValue_)
        public
        onlyRole(OPERATOR_ROLE)
    {
        // Take initial amount out of the vault and move it to the "strategy".
        // We simulate this by moving the assets to the contract owner.
        bAsset.safeTransfer(msg.sender, initialAmount);

        strategyValue = strategyValue_; // Set the new total strategy value.
    }

    /// @dev Sets the total value held by the strategy in underlying.
    function harnessExecuteStrategyNetWithdraw(uint256 initialAmount, uint256 strategyValue_)
        public
        onlyRole(OPERATOR_ROLE)
    {
        // Take assets out of the "strategy" (aka the contract owner) back to the vault.
        bAsset.safeTransferFrom(msg.sender, address(this), initialAmount);

        strategyValue = strategyValue_; // Set the new total strategy value.
    }

    /// @dev Override function so we can simulate yields generated by the underlying strategy in unit tests.
    function _getStrategyValue() internal view override returns (uint256) {
        if (useMockStrategy) {
            return strategyValue;
        } else {
            return super._getStrategyValue();
        }
    }
}
